package myapp.payment.configurations;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.paypal.base.rest.APIContext;
import com.paypal.base.rest.OAuthTokenCredential;
import com.paypal.base.rest.PayPalRESTException;

/**
 * 
 * Indicates that the class has @Bean definition methods. 
 * So Spring container can process the class and generate Spring Beans to be used in the application.
 * 
 * Here we configure the {@link OAuthTokenCredential}, Client Id, Client Secret and the mode which is sandbox in our application
 * 
 * @author Nandan
 *
 */

@Configuration
public class MyPaymentPaypalConfiguration 
{
	@Value("${paypal.client.id}")
    private String clientId;
	@Value("${paypal.client.secret}")
    private String clientSecret;
	@Value("${paypal.mode}")
    private String mode;
    
	/**
	 * The endpoint where the transaction takes shall be returned here.
	 * 
	 * @return {@link Map}
	 */
	@Bean
	public Map<String, String> endPoint()
	{
		Map<String, String> endPoint = new HashMap<>();
		endPoint.put("mode", mode);
		return endPoint;
	}
	
	/**
	 * Creates a {@link OAuthTokenCredential} object by adding the details like 
	 * Client ID, Secret which is generated by PayPal rest api in our application
	 * 
	 * @return {@link OAuthTokenCredential}
	 */
	@Bean
	public OAuthTokenCredential authTokenCredential()
	{
		return new OAuthTokenCredential(clientId, clientSecret, endPoint());
	}
	
	/**
	 * Creates and returns {@link APIContext} which is very important to
	 * carry out any kind of transactions or activities in the Payment Application using Paypal rest API
	 * 
	 * @return
	 * @throws PayPalRESTException
	 */
	@Bean
	public APIContext apiContext() throws PayPalRESTException
	{
		APIContext apiContext = new APIContext(authTokenCredential().getAccessToken());
		apiContext.setConfigurationMap(endPoint());
		return apiContext;
	}
	
}
